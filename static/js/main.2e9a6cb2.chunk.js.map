{"version":3,"sources":["containers/CountdownForm/CountdownForm.js","components/CountdownCardList/CountdownCard/CountdownCard.js","components/CountdownCardList/CountdownCardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["CountdownForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","validateField","fieldName","formErrors","state","eventNameValid","eventDateValid","trim","length","eventName","currentDate","moment","diff","eventDate","validateForm","formValid","handleSubmit","preventDefault","randomBgColor","getRandomColor","countdownCard","defaultState","Math","random","error","_this2","react_default","a","createElement","Form","className","onSubmit","Group","Field","hasError","required","width","onBlur","onChange","type","Label","basic","color","pointing","Button","disabled","id","primary","Component","style","backgroundColor","padding","futureDate","Card","Popup","trigger","icon","onClick","deleteHandler","content","position","verticalOffset","size","CountdownCardList","countdownCards","map","index","CountdownCard_CountdownCard","key","App","concat","toConsumableArray","handleDelete","newCountdownCards","splice","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","err","setItem","stringify","containers_CountdownForm_CountdownForm","stackable","itemsPerRow","components_CountdownCardList_CountdownCardList","Boolean","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e9a6cb2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport \"./CountdownForm.css\";\n\nclass CountdownForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultState = {\n      eventName: \"\",\n      eventDate: \"\",\n      randomBgColor: \"\",\n      formErrors: {\n        eventName: \"\",\n        eventDate: \"\"\n      },\n      eventNameValid: false,\n      eventDateValid: false,\n      formValid: false\n    };\n\n    this.state = this.defaultState;\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState(\n      {\n        [name]: value\n      },\n      () => {\n        this.validateField(name, value);\n      }\n    );\n  };\n\n  hasError(error) {\n    return error.length > 0;\n  }\n\n  validateField = (fieldName, value) => {\n    let formErrors = this.state.formErrors,\n      eventNameValid = this.state.eventNameValid,\n      eventDateValid = this.state.eventDateValid;\n    switch (fieldName) {\n      case \"eventName\":\n        value = value.trim();\n        eventNameValid = value.length > 0;\n        formErrors.eventName = eventNameValid\n          ? \"\"\n          : \"Please enter a valid event name\";\n        break;\n      case \"eventDate\":\n        let currentDate = moment(),\n          inputDate = moment(value);\n        eventDateValid = inputDate.diff(currentDate, \"days\") >= 0;\n        formErrors.eventDate = eventDateValid\n          ? \"\"\n          : \"Please enter a date in the future\";\n        break;\n      default:\n        break;\n    }\n\n    this.setState(\n      {\n        formErrors: formErrors,\n        eventNameValid: eventNameValid,\n        eventDateValid: eventDateValid\n      },\n      this.validateForm\n    );\n  };\n\n  validateForm = () => {\n    const formValid = this.state.eventNameValid && this.state.eventDateValid;\n    this.setState({\n      formValid: formValid\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const randomBgColor = this.getRandomColor();\n    this.setState(\n      {\n        randomBgColor: randomBgColor\n      },\n      () => {\n        const countdownCard = {\n          eventName: this.state.eventName,\n          eventDate: this.state.eventDate,\n          randomBgColor: this.state.randomBgColor\n        };\n\n        this.props.handleSubmit(countdownCard);\n        this.setState(this.defaultState);\n      }\n    );\n  };\n\n  getRandomColor = () => {\n    return \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\";\n  };\n\n  render() {\n    return (\n      <Form className=\"Form\" onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Field\n            error={this.hasError(this.state.formErrors.eventName)}\n            required\n            width={8}\n          >\n            <label>Event</label>\n            <input\n              name=\"eventName\"\n              onBlur={() =>\n                this.validateField(\"eventName\", this.state.eventName)\n              }\n              onChange={this.handleChange}\n              type=\"text\"\n              value={this.state.eventName}\n            />\n            {this.hasError(this.state.formErrors.eventName) ? (\n              <Label basic color=\"red\" pointing>\n                {this.state.formErrors.eventName}\n              </Label>\n            ) : null}\n          </Form.Field>\n          <Form.Field\n            error={this.hasError(this.state.formErrors.eventDate)}\n            required\n            width={8}\n          >\n            <label>Date</label>\n            <input\n              name=\"eventDate\"\n              onBlur={() =>\n                this.validateField(\"eventDate\", this.state.eventDate)\n              }\n              onChange={this.handleChange}\n              type=\"date\"\n              value={this.state.eventDate}\n            />\n            {this.hasError(this.state.formErrors.eventDate) ? (\n              <Label basic color=\"red\" pointing>\n                {this.state.formErrors.eventDate}\n              </Label>\n            ) : null}\n          </Form.Field>\n        </Form.Group>\n        <Form.Button\n          disabled={!this.state.formValid}\n          id=\"submitButton\"\n          primary\n          type=\"submit\"\n        >\n          Add Event!\n        </Form.Button>\n      </Form>\n    );\n  }\n}\n\nexport default CountdownForm;\n","import React from \"react\";\nimport { Card, Button, Popup } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport \"./CountdownCard.css\";\n\nconst countdownCard = props => {\n  let style = {\n    backgroundColor: props.randomBgColor,\n    padding: \"1.5em\"\n  };\n\n  let currentDate = moment(),\n    futureDate = moment(props.eventDate);\n\n  return (\n    <Card className=\"CountdownCard\" style={style}>\n      <Popup\n        trigger={\n          <Button\n            id=\"deleteButton\"\n            icon=\"trash alternate outline\"\n            onClick={props.deleteHandler}\n          />\n        }\n        content=\"Delete this event\"\n        position=\"bottom right\"\n        verticalOffset={-10}\n        size=\"mini\"\n      />\n      <h3 id=\"eventName\">{props.eventName}</h3>\n      <h2 id=\"numDays\">{futureDate.diff(currentDate, \"days\")}</h2>\n      <p id=\"unitTime\">DAYS</p>\n    </Card>\n  );\n};\n\nexport default countdownCard;\n","import React, { Component } from \"react\";\nimport CountdownCard from \"./CountdownCard/CountdownCard\";\n\nclass CountdownCardList extends Component {\n  render() {\n    return this.props.countdownCards.map((countdownCard, index) => {\n      return (\n        <CountdownCard\n          deleteHandler={() => this.props.deleteHandler(index)}\n          eventName={countdownCard.eventName}\n          eventDate={countdownCard.eventDate}\n          randomBgColor={countdownCard.randomBgColor}\n          key={index}\n        />\n      );\n    });\n  }\n}\n\nexport default CountdownCardList;\n","import React, { Component } from \"react\";\nimport CountdownForm from \"./CountdownForm/CountdownForm\";\nimport { Card } from \"semantic-ui-react\";\nimport CountdownCardList from \"../components/CountdownCardList/CountdownCardList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countdownCards: [\n        {\n          eventName: \"Special Occasion\",\n          eventDate: \"2019-02-12\",\n          randomBgColor: \"hsl(50, 100%, 75%)\"\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    for (let key in this.state) {\n      if (localStorage.hasOwnProperty(key)) {\n        let value = localStorage.getItem(key);\n\n        try {\n          value = JSON.parse(value);\n          this.setState({\n            [key]: value\n          });\n        } catch (err) {\n          this.setState({\n            [key]: value\n          });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    for (let key in this.state) {\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  handleSubmit = countdownCard => {\n    this.setState({\n      countdownCards: [...this.state.countdownCards, countdownCard]\n    });\n  };\n\n  handleDelete = index => {\n    const newCountdownCards = this.state.countdownCards;\n    newCountdownCards.splice(index, 1);\n    this.setState({\n      countdownCards: newCountdownCards\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id=\"title\">Countdown</h1>\n        <p id=\"subtitle\">Add an event to track how many days are left!</p>\n        <CountdownForm handleSubmit={this.handleSubmit} />\n        <Card.Group stackable className=\"CountdownCardList\" itemsPerRow={3}>\n          <CountdownCardList\n            countdownCards={this.state.countdownCards}\n            deleteHandler={this.handleDelete}\n          />\n        </Card.Group>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}